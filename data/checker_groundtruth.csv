Library,Commit,Buggy API,Log Rule,Root Cause,Date,bug report,PR/Issue,Violation,Impact,Action,condition,Fixing element,Fixing element detail,,,
pytorch,https://github.com/pytorch/pytorch/commit/2dafa70d61a1a5af849ab79c7aed4c84686337a0,torch.compile,AssertionError,Type Checking,2023-06-07 10:40:12,Add a little more error checking to minifier,,Missing,Others,add,Type Checking API,Valid Object Type,Regular Object,,,
pytorch,https://github.com/pytorch/pytorch/commit/4ee179c9528c8c6aae17a01f2b0d7e8235219219,torch.compile,has no attribute,Edge Cases,2023-09-15 20:07:19,"Fix ConstantVariable init method if NumPy is missing. By adding `np is not None` check before `isinstance(value, np.number)`",1,Insufficient,Unexpected Behavior,extend,If Checker,Object is Not Empty,Regular Object,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/88609e2e22fa5c296de2e27e04d1cc4743b2dfcd,tf.boolean_mask,cannot compute,Type Checking,2022-02-17 19:01:10, Add appropriate dtype check for tf.boolean_mask's mask. This PR tries to address the issue raised in 54412 where mask's dtype was checked in tf.boolean_mask and an invalid result has been returned instead.,,Missing,Unexpected Behavior,add,If Checker,Valid Tensor Type,Tensor,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/66e0cb1d9afd251931f4f920c5d7bd638bc882b4,tf.clip_by_norm,NA,Edge Cases,2023-07-11 5:43:29, validate clip_norm argument in clip_by_norm API. The API clip_by_norm have argument clip_norm which accepts  0-D (scalar) `Tensor` > 0 . But if we pass -ve value for this argument then its not raising intended error and converting the input tensor into Negative which IMO is wrong. Hence I am adding validation code for -ve values to raise value error.,,Missing,Unexpected Behavior,add,If Checker,Valid Integer Argument,Integer Variable,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/86abddb56350bccd95d1b7140b003fb03525b890,tf.histogram_fixed_width_bins,should be a,Error Message,2022-02-17 18:11:34, Add appropriate error check for nbins in tf.histogram_fixed_width_bins. This PR tries to address the issue raised in 54415 where nbins was not checked for tf.histogram_fixed_width_bins and an incorrect result was returned when nbins < 0.,,Misleading,Confusing Error Message,improve,Assertion Statement,Improve Error Message,Error Message,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/8c3822edbb31cf71cedaf49f2167e45c1e2d0b83,tf.is_tensor,NA,Execution Mode,2023-03-13 15:53:59,Update the is_dtensor check to only run in eager mode.,,Missing,Unexpected Behavior,add,If Checker,Tensor is Executed in Eager Mode,Tensor,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/480641e3599775a8895254ffbc0fc45621334f68,tf.linalg.triangular_solve,NA,Edge Cases,2021-04-24 19:51:15, Validate (and ensure validation sticks) inputs for `MatrixTriangularSolve`.,,Missing,Program Crash,add,Macro Checker,Valid Tensor Dimension,Tensor,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/4f4a0276a2cf9186c0541072964676159368286e,tf.math.cumsum,NA,Type Checking,2022-02-18 2:04:46, Add appropriate PyObject type check for bool. This PR fixes an issue where PyObject type in tf's C bindings does not check if an input is a boolean and will always cast to bool.,,Missing,Unexpected Behavior,add,Type Checking API,Valid Object Type,Regular Object,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/9a4b6b6bcc7a813162bf0378727950e321aca19c,tf.math.real,NA,Type Checking,2023-05-09 14:49:51,Add stricter type checking for tf.math.real (using is_numeric),,Improper,Others,update,Type Checking API,Valid Tensor Type,Tensor,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/2e4d3951eb618a7c34d5e629fc2506ea2a62b4a7,tf.nn.dilation2d,NA,Edge Cases,2019-07-01 9:53:56, Correct Tensor order for dilation2D. `gen_nn_ops.dilation2d` seems to be in `NHWC` while the parent function was asking for `NCHW`.  I corrected the doc and the check.,,Improper,Unexpected Behavior,update,If Checker,Others,Others,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/80bb2f5511e7d2d386c79da52ff517691e19ac54,tf.random.learned_unigram_candidate_sampler,Check failed,Edge Cases,2022-05-24 11:40:36," Add check condition for large values of range_max, which is causing session abort.",,Missing,Program Crash,add,If Checker,Valid Integer Argument,Integer Variable,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/1610da3f992487bd9a8181d1e83cae99fe1e34d9,tf.raw_ops.AvgPoolGrad,Check failed,Edge Cases,2023-04-10 16:56:07,add more sanity check on AvgPoolGrad op,,Missing,Program Crash,add,Macro Checker,Shape Mismatch Between Tensors,Tensor,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/e99e31597c1b5cc9f0cbc8a3dea71674d81c20b1,tf.raw_ops.GRUBlockCell,Check failed,Error Message,2023-02-15 15:44:47," Fix GRUCellBlockOp message for invalid rank of x. The validation checks that x is a matrix, so rank must be 2.",,Misleading,Confusing Error Message,improve,Macro Checker,Improve Error Message,Error Message,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/8b742f8559e88474735d0a2c03e00da65e40b412,tf.raw_ops.TridiagonalSolve,Check failed,Edge Cases,2023-05-03 13:28:05,Fix check error on shape overflow.,,Missing,Numerical Error,add,Macro Checker,Valid Tensor Dimension,Others,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/199f1ff12a28d571100b323ec54a5eee47078d8b,tf.single.rfft2d,Check failed,Edge Cases,2022-03-17 11:04:54, Add necessary check in fft ops to fix crash. This PR tries to address the issue raised in 55263 where tf.single.rfft2d will crash when length contains negative value.,,Missing,Program Crash,add,Macro Checker,Others,Others,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/0666d8bb711b41c9f03dec238d7d165bc946fc70,tf.sparse.reorder,Check failed,Edge Cases,2020-12-14 18:11:16, Prevent crash of tensorflow if shape is too large for tf.sparse.reorder. This PR tries to address the issue raised in 45392 where tensorflow crashes if shape of sparse tensor is too large for tf.sparse.reorder. This PR adds additional checks and exit gracefully if the shape is too large.,,Missing,Program Crash,add,Macro Checker,Valid Tensor Dimension,Tensor,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/e560136d757867482a93be74e108ef516920bcfc,tf.stack,Check failed,Edge Cases,2021-12-09 3:00:55, Fix wrong output of tf.stack with 0-dimension tensor. This PR tries to address a bug where tf.stack will silently output wrong result with 0-dimension tensor. The issue was that the shape check was skipped when num of output elements was zero.,,Improper,Program Crash,relocate,Macro Checker,Shape Mismatch Between Tensors,Tensor,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/9ce847ed140702d1dd4cb204a8afe0ffedb70b15,tf.Variable,NA,Execution Mode,2020-10-02 19:04:32," Remove a few check ops that no longer need to run in tf.Variable's constructor. VarHandleOp ensures there is no sharing. These aren't a huge part of startup time for replicated models, but there's still no reason to run them.",,Unnecessary,Unexpected Behavior,remove,If Checker,Tensor is Executed in Eager Mode,Tensor,,,
tensorflow,https://github.com/tensorflow/tensorflow/commit/b4aadb17b7aa5ea926b5220008e41f33e582baed,tf.where,NA,Edge Cases,2023-08-07 14:49:18,Return error on invalid input in tfl.where,,Missing,Unexpected Behavior,add,Assertion Statement,Others,Others,,,
pytorch,https://github.com/pytorch/pytorch/commit/4b45f08f8765549915417997c30ae8981f2ad125,torch.Tensor.index_copy_,Segmentation fault (core dumped),Edge Cases,2019-06-13 16:15:23,The issue was related to not checking the dimensions of source vs destination tensors.,,Missing,Program Crash,add,If Checker,Shape Mismatch Between Tensors,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/f3a2094065c8b4b7bae426e71c923a8a8abb74b5,torch._dynamo.export,error,Type Checking,2024-02-09 13:24:09,"Mitigate legacy issue that aten op as export entrance function. This is not supported any more, now the top level ```torch.export``` only support ```nn.Module```, but there are still some tests using the internal APIs and caused the ```trace_rules.check``` assertion error. This PR is going to mitigate such cases.",,Insufficient,Unexpected Behavior,extend,If Checker,Valid Object Type,Regular Object,,,
pytorch,https://github.com/pytorch/pytorch/commit/bdbd3ed312e0fc81e75302239ea78b3445fe95e7,torch._dynamo.optimize,Graph break,Computation Graph,2023-01-18 19:59:33,"Although `len(compiler.captured_graphs)` is 2, no error was thrown during the compilation. This observation conflicts with `nopython=True`. After some digging, I found a check is missed before making graph break. This PR adds it.",,Insufficient,Program Crash,extend,If Checker,Others,Others,,,‍
pytorch,https://github.com/pytorch/pytorch/commit/43f810fa96a0d2c40387c8c84f710926d9ede3c1,torch.cuda.comm.scatter,Segmentation fault (core dumped),Edge Cases,2021-03-02 13:58:10,Add streams boundary check to torch::cuda::scatter`. Summary: Accessing elements of `std::vector` outside of its boundaries can lead to crashes/memory corruptions,,Insufficient,Program Crash,extend,If Checker,In Range Tensor Indexing,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/40a7c317bc60713528320b9786765e4ec5707982,torch.dot,NA,Others,2021-06-24 21:44:41,Run BLAS F2C checks on host architecture,,Missing,Unexpected Behavior,add,If Checker,Others,Others,,,
pytorch,https://github.com/pytorch/pytorch/commit/324dc1623e2f91892038fb1b151450a7c6529dd9,torch.gather,out of bounds,Type Checking,2020-05-11 2:15:45,"add dtype checking for gather and scatter. in the `cpu_scatter_gather_base_kernel`, it interpret a pointer as `int64_t` regardless the actual dtype. add a index dtype checking will avoid the nasty index out of bound error. As using `int64_t` is convention in ATen code (a.k.a, a limitation), no further fix is needed at the moment.",,Missing,Program Crash,add,Macro Checker,Valid Tensor Type,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/ba59d720cd5c5c81601b53d2c3397c46c1f87883,torch.linspace,Trying to create tensor,Edge Cases,2019-10-21 16:03:02,Change error message for torch.linspace(). Basically moves the error checking from the device-specific function to the native function.,,Missing,Unexpected Behavior,add,If Checker,Valid Integer Argument,Integer Variable,,,
pytorch,https://github.com/pytorch/pytorch/commit/2c9dd886afc656a8bfe5d8bbcb601ee5877cee21,torch.movedim,please report a bug to PyTorch,Edge Cases,2021-12-14 12:55:59,Modify torch.movedim to handle scalar as no-op. Summary: `torch.movedim` directly handle the case of a scalar tensor (0-dim) in input as a no-op by returning a view of the input tensor (after all the usual checks for the other parameters),,Missing,Program Crash,add,If Checker,Valid Tensor Dimension,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/48a49b2683ffa21eb1b472e503c129c043c18f87,torch.nn.ConstantPad3d,too large,Error Message,2023-07-10 15:00:47,"use more informative error message for ConstandPad2d/3d.  the current error message for `torch.nn.ConstantPad2d` and `torch.nn.ConstantPad3d` is misleading, this PR fixes the problem.",2,Misleading,Confusing Error Message,improve,Macro Checker,Improve Error Message,Error Message,,,
pytorch,https://github.com/pytorch/pytorch/commit/999bae0f54108ffc5b7cf2524a02a83901554b16,torch.nn.Conv1d,NA,Edge Cases,2023-05-30 1:07:59,Add padding check for use_nnpack. nnp_convolution_output doesn't support the case of input padding > = kernel_size.,,Insufficient,Unexpected Behavior,extend,If Checker,Valid Tensor Dimension,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/1becd2c314f45bded8d3fbec91d785e7190b4afe,torch.nn.CTCLoss,Expected,Device Availability,2023-12-12 17:20:20,"Align checks in _use_cudnn_ctc_loss with those in _cudnn_ctc_loss.This PR is intended to fix the following problem: When using `CTCLoss`, there is a cudnn path gated by a call to [`_use_cudnn_ctc_loss`] which checks some conditions. However, there are more checks in `_cudnn_ctc_loss`.  some of which are not present in `_use_cudnn_ctc_loss` (e.g. the check that `targets` is on CPU which will cause a RuntimeError after dispatching to `_cudnn_ctc_loss`). Instead, these checks should be in `_use_cudnn_ctc_loss` so that the normal `_ctc_loss` path will be used if the checks are not met)",1,Insufficient,Others,extend,If Checker,Available Device,Device,,,
pytorch,https://github.com/pytorch/pytorch/commit/8f26d6aabcad991da88b663467ee2080a38631f7,torch.nn.functional.conv2d,Segmentation fault (core dumped),Edge Cases,2017-10-13 10:56:19, More shape checking for ConvNd.* check conv weight & bias dims,,Missing,Program Crash,add,If Checker,Valid Tensor Dimension,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/cf732053e4f6b93b0a93006613552cd97f415b80,torch.nn.functional.embedding_bag,Assertion,Boundary Value,2023-03-16 22:01:43," Today if we're accessing out of bound embedding rows, it'll either go through or throw IMA. This is not ideal - adding bound checks. This will probably slow things down - need to benchmark it.",,Missing,Program Crash,add,Macro Checker,In Range Tensor Indexing,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/9a9eadacc6ac3b734a6d607ae6f63ec1a0d1438d,torch.nn.functional.grid_sample,invalid combination of arguments,Device Availability,2018-06-19 11:53:46,explicitly check device for grid_sampler,,Missing,Program Crash,add,If Checker,Available Device,Device,,,
pytorch,https://github.com/pytorch/pytorch/commit/bf32ea80942ce720b105efcd517fd11182edeb08,torch.nn.InstanceNorm1d,NA,Edge Cases,2018-07-27 12:24:07," Fix dimension check in 1D instance norm, allowing 2D tensors alongsid e 3D.",,Insufficient,Program Crash,extend,If Checker,Valid Tensor Dimension,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/d8466964b348b6172317f70b8e52de02402bad54,torch.nn.MultiMarginLoss,Invalid __global__,Edge Cases,2022-11-15 15:35:51,Add range check to multi margin loss target ,,Missing,Program Crash,add,If Checker,Valid Tensor Dimension,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/7ddf167ba5db277e02f983a6bde2bc3f5fbe1caa,torch.nn.UpsamplingNearest2d,NA,Edge Cases,2022-09-30 14:30:06,Move the asserts in shape functions upsample_nearest_2d op. The assert check are moved to top and the function now returns out. This is needed by the downstream torch-mlir project to correctly determine the output type.,,Missing,Unexpected Behavior,add,If Checker,Object is Not Empty,Regular Object,,,
pytorch,https://github.com/pytorch/pytorch/commit/8198474eb763c8d526ede3418211479c2f4cbd30,torch.onnx.export,NA,Computation Graph,2023-11-02 15:31:32,"Previous to this PR, we only checked TorchScript nodes for scope compatibility, skipping their parent's scope reference check.",1,Missing,Unexpected Behavior,add,Checker API,Valid Computation Graph,Computation Graph,,,
pytorch,https://github.com/pytorch/pytorch/commit/8340762211e3b55caa178bac748bd902249f6fc0,torch.optim.lr_scheduler.CosineAnnealingWarmRestarts,NA,Type Checking,2023-06-13 22:13:05,Update lr_scheduler.py to check the type of eta_min. Add float assertion to `eta_min` parameter in `CosineAnnealingWarmRestarts`.,,Missing,Unexpected Behavior,add,Type Checking API,Valid Object Type,Regular Object,,,
pytorch,https://github.com/pytorch/pytorch/commit/bbc7c79b20e67da450dd9b7de70cc6b68e656714,torch.rand,an illegal memory,Device Type,2023-03-27 14:57:27,add device checks for sparse csr,,Missing,Unexpected Behavior,add,Macro Checker,Valid Device Type,Device,,,
pytorch,https://github.com/pytorch/pytorch/commit/7ea6559658a6f650363f8b96f462bbc047e29124,torch.stack,invalid argument,Edge Cases,2020-02-04 18:00:54,Add size checks to torch.stack. Checks the size of each tensor passed to `torch.stack` before calling `cat` to address #29510. This is done in the `get_stack_input` function as that is a common path. The function now compares the size of each tensor in the TensorList to the size of the first tensor and throws an exception when the sizes are not equal.,,Missing,Others,add,Macro Checker,Shape Mismatch Between Tensors,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/92ebb04f9206882e6d312a8b91318545f43a53c2,torch.Tensor,NA,Type Checking,2020-09-24 19:26:59,added check for NumberType,,Insufficient,Unexpected Behavior,extend,If Checker,Valid Tensor Type,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/e9c1ccee2247a7746fde202067a7d47b72809968,torch.Tensor.normal_,expects,Edge Cases,2022-03-01 18:28:14,Bug fix: allow std 0 in the meta definition of normal_. All other `normal` variants allow 0.  Looks like a mistake made while copying the check. ,2,Improper,Others,update,Macro Checker,Others,Others,,,
pytorch,https://github.com/pytorch/pytorch/commit/ae55619a2bb73ebcdc80b02a6ccd72275a9ce23e,torch.tensordot,please report a bug to,Type Checking,2023-04-14 12:57:35,Add check for same dtype in tensordot implementation,,Missing,Unexpected Behavior,add,Macro Checker,Valid Tensor Type,Tensor,,,
pytorch,https://github.com/pytorch/pytorch/commit/cc6a51c9f3ee97a06ff9c0b84477e88e33e31137,torch.utils.data.WeightedRandomSampler,NA,Edge Cases,2022-06-02 17:12:14,added shape checking to WeightedRandomSampler,,Missing,Others,add,Macro Checker,Valid Tensor Dimension,Tensor,,,
